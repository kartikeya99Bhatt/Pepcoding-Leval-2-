class Solution {
    int []parent;
    int []size;
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n=graph.length;
        parent=new int[n];
        size=new int[n];
        
        for(int i=0;i<n;i++){
            parent[i]=i;
            size[i]=1;
        }
       for(int i=0;i<n;i++){
           for(int j=0;j<graph[i].length;j++){
               if(graph[i][j]==1){
                   unionHelper(i,j);
               }
           }
       }
        // now size
        int []imap=new int[n];
        for(int val:initial){
            int pofval=find(val);
            imap[pofval]++;
        }
        
        
        //->
        Arrays.sort(initial);
        int ans_Size=0;
        int ans_idx=initial[0];
        
        for(int i:initial){
           int ri=find(i);
            if(imap[ri]==1){
               if(size[ri]>ans_Size){
                   ans_idx=i;
                   ans_Size=size[ri];
               }
            }
        }
        
        return ans_idx;
        
    }
    public void  unionHelper(int x,int y){
        int pofx=find(x);
        int pofy=find(y);
        if(pofx!=pofy){
            union(pofx,pofy);
        }
    }
    public int find(int x){
        if(parent[x]==x){
            return x;
        }
       parent[x]=find(parent[x]);
        return parent[x];
    }
    public void union(int x,int y){
        if(size[x]<size[y]){
            parent[x]=y;
            size[y]+=size[x];
        }
        else if(size[y]<size[x]){
             parent[y]=x;
            size[x]+=size[y];
        }
        else{
             parent[x]=y;
            size[y]+=size[x];
        }
    }
}
